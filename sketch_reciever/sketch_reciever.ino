// –ì–ò–ë–†–ò–î–ù–´–ô –ü–†–ò–Å–ú–ù–ò–ö: WiFi + BLE Scanner + WebSocket Server
#include <WiFi.h>
#include <BLEDevice.h>
#include <BLEScan.h>
#include <BLEAdvertisedDevice.h>
#include <WebSocketsServer.h>
#include <ArduinoJson.h>
#include <math.h>

// ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========

// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–∞—è–∫–æ–≤ (–≤ –º–µ—Ç—Ä–∞—Ö)
struct Beacon {
  int id;
  const char* wifiName;
  const char* bleName;
  float x, y;
  
  // –î–∞–Ω–Ω—ã–µ WiFi
  int wifiRSSI;
  float wifiDistance;
  
  // –î–∞–Ω–Ω—ã–µ BLE
  int bleRSSI;
  float bleDistance;
  
  bool wifiFound;
  bool bleFound;
};

Beacon beacons[3] = {
  {1, "Beacon_1", "BLE_Beacon_1", 0.0, 0.0, 0, 0, 0, 0, false, false},
  {2, "Beacon_2", "BLE_Beacon_2", 5.0, 0.0, 0, 0, 0, 0, false, false},
  {3, "Beacon_3", "BLE_Beacon_3", 2.5, 5.0, 0, 0, 0, 0, false, false}
};

// –ö–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
const float WIFI_RSSI_AT_1M = -40;
const float BLE_RSSI_AT_1M = -59;
const float PATH_LOSS = 2.5;

// –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è
struct Position {
  float x, y;
  float accuracy;
  float wifiX, wifiY, wifiAccuracy;
  float bleX, bleY, bleAccuracy;
  float wifiWeight, bleWeight;
} currentPos;

// BLE —Å–∫–∞–Ω–µ—Ä
BLEScan* pBLEScan;

// WebSocket —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 81
WebSocketsServer webSocket = WebSocketsServer(81);

// –ë—É—Ñ–µ—Ä—ã –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
#define SMOOTH_SIZE 3
float xBuffer[SMOOTH_SIZE] = {0};
float yBuffer[SMOOTH_SIZE] = {0};
int bufferIdx = 0;

// –¢–∞–π–º–µ—Ä—ã
unsigned long lastScan = 0;
unsigned long lastUpdate = 0;
const int SCAN_INTERVAL = 2000;  // –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫
const int UPDATE_INTERVAL = 500;  // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫

// ========== SETUP ==========

void setup() {
  Serial.begin(115200);
  delay(1000);
  
  Serial.println("\n========================================");
  Serial.println("  HYBRID POSITIONING SYSTEM");
  Serial.println("  WiFi + BLE + WebSocket");
  Serial.println("========================================\n");
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WiFi (—Å—Ç–∞–Ω—Ü–∏—è –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
  WiFi.mode(WIFI_AP_STA);
  delay(100);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BLE
  Serial.println("[BLE] Initializing...");
  BLEDevice::init("");
  pBLEScan = BLEDevice::getScan();
  pBLEScan->setActiveScan(true);
  pBLEScan->setInterval(100);
  pBLEScan->setWindow(99);
  Serial.println("[BLE] ‚úÖ Ready");
  
  // –°–æ–∑–¥–∞–µ–º —Å–≤–æ—é WiFi —Ç–æ—á–∫—É –¥–ª—è WebSocket
  Serial.println("\n[WiFi] Creating Access Point...");
  WiFi.softAP("PositioningSystem", "12345678");
  WiFi.scanNetworks(true);  // true = async scan
  delay(100);
  IPAddress IP = WiFi.softAPIP();
  Serial.print("[WiFi] Connect to: ");
  Serial.println(IP);
  Serial.println("[WiFi] Open: http://" + IP.toString());
  
  // –ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞
  Serial.println("\n[WebSocket] Starting server on port 81...");
  webSocket.begin();
  webSocket.onEvent(webSocketEvent);
  Serial.println("[WebSocket] ‚úÖ Ready");
  
  Serial.println("\n========================================");
  Serial.println("‚úÖ SYSTEM READY");
  Serial.println("========================================\n");
}

// ========== MAIN LOOP ==========

void loop() {
  webSocket.loop();
  
  unsigned long now = millis();
  
  // –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—è–∫–æ–≤
  if (now - lastScan > SCAN_INTERVAL) {
    lastScan = now;
    
    Serial.println("\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
    Serial.println("üîç SCANNING BEACONS...");
    
    scanWiFi();
    scanBLE();
    
    calculatePosition();
    
    printStatus();
  }
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞–º
  if (now - lastUpdate > UPDATE_INTERVAL) {
    lastUpdate = now;
    sendDataToClients();
  }
}

// ========== WiFi –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï ==========

void scanWiFi() {
  Serial.println("\n[WiFi] Scanning networks...");
  
  // –°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  for (int i = 0; i < 3; i++) {
    beacons[i].wifiFound = false;
  }
  
  int n = WiFi.scanNetworks();
  
  for (int i = 0; i < n; i++) {
    String ssid = WiFi.SSID(i);
    int rssi = WiFi.RSSI(i);
    
    // –ò—â–µ–º –Ω–∞—à–∏ –º–∞—è–∫–∏
    for (int j = 0; j < 3; j++) {
      if (ssid == beacons[j].wifiName) {
        beacons[j].wifiRSSI = rssi;
        beacons[j].wifiFound = true;
        
        // –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        float ratio = (WIFI_RSSI_AT_1M - rssi) / (10.0 * PATH_LOSS);
        beacons[j].wifiDistance = pow(10, ratio);
        
        Serial.print("  ‚úÖ ");
        Serial.print(beacons[j].wifiName);
        Serial.print(" | RSSI: ");
        Serial.print(rssi);
        Serial.print(" | Dist: ");
        Serial.print(beacons[j].wifiDistance, 1);
        Serial.println("m");
      }
    }
  }
}

// ========== BLE –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï ==========

void scanBLE() {
  Serial.println("\n[BLE] Scanning devices...");
  
  // –°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  for (int i = 0; i < 3; i++) {
    beacons[i].bleFound = false;
  }
  
  BLEScanResults* foundDevices = pBLEScan->start(1, false);
  
  for (int i = 0; i < foundDevices->getCount(); i++) {
    BLEAdvertisedDevice device = foundDevices->getDevice(i);
    String name = device.getName().c_str();
    int rssi = device.getRSSI();
    
    // –ò—â–µ–º –Ω–∞—à–∏ –º–∞—è–∫–∏
    for (int j = 0; j < 3; j++) {
      if (name == beacons[j].bleName) {
        beacons[j].bleRSSI = rssi;
        beacons[j].bleFound = true;
        
        // –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        float ratio = (BLE_RSSI_AT_1M - rssi) / (10.0 * PATH_LOSS);
        beacons[j].bleDistance = pow(10, ratio);
        
        Serial.print("  ‚úÖ ");
        Serial.print(beacons[j].bleName);
        Serial.print(" | RSSI: ");
        Serial.print(rssi);
        Serial.print(" | Dist: ");
        Serial.print(beacons[j].bleDistance, 1);
        Serial.println("m");
      }
    }
  }
  
  pBLEScan->clearResults();
}

// ========== –¢–†–ò–õ–ê–¢–ï–†–ê–¶–ò–Ø ==========

bool trilaterate(float d1, float d2, float d3, 
                 float x1, float y1, float x2, float y2, float x3, float y3,
                 float &x, float &y, float &accuracy) {
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
  if (d1 <= 0 || d2 <= 0 || d3 <= 0) {
    return false;
  }
  
  // –ú–µ—Ç–æ–¥ –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤
  float A = 2 * (x2 - x1);
  float B = 2 * (y2 - y1);
  float C = d1*d1 - d2*d2 - x1*x1 + x2*x2 - y1*y1 + y2*y2;
  
  float D = 2 * (x3 - x2);
  float E = 2 * (y3 - y2);
  float F = d2*d2 - d3*d3 - x2*x2 + x3*x3 - y2*y2 + y3*y3;
  
  float denominator = (E*A - B*D);
  if (abs(denominator) < 0.001) {
    return false;  // –í—ã—Ä–æ–∂–¥–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
  }
  
  x = (C*E - F*B) / denominator;
  y = (C*D - A*F) / (B*D - A*E);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN
  if (isnan(x) || isnan(y)) {
    return false;
  }
  
  // –†–∞—Å—á–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ (—Å—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞)
  accuracy = 0;
  float dx, dy, calc_dist;
  
  dx = x - x1; dy = y - y1;
  calc_dist = sqrt(dx*dx + dy*dy);
  accuracy += abs(calc_dist - d1);
  
  dx = x - x2; dy = y - y2;
  calc_dist = sqrt(dx*dx + dy*dy);
  accuracy += abs(calc_dist - d2);
  
  dx = x - x3; dy = y - y3;
  calc_dist = sqrt(dx*dx + dy*dy);
  accuracy += abs(calc_dist - d3);
  
  accuracy /= 3.0;
  
  return true;
}

// ========== –†–ê–°–ß–ï–¢ –ü–û–ó–ò–¶–ò–ò ==========

void calculatePosition() {
  Serial.println("\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
  Serial.println("üìê CALCULATING POSITION...\n");
  
  // –¢—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è –ø–æ WiFi
  bool wifiOK = false;
  if (beacons[0].wifiFound && beacons[1].wifiFound && beacons[2].wifiFound) {
    wifiOK = trilaterate(
      beacons[0].wifiDistance, beacons[1].wifiDistance, beacons[2].wifiDistance,
      beacons[0].x, beacons[0].y, beacons[1].x, beacons[1].y, beacons[2].x, beacons[2].y,
      currentPos.wifiX, currentPos.wifiY, currentPos.wifiAccuracy
    );
    
    if (wifiOK) {
      Serial.println("[WiFi] Position calculated:");
      Serial.print("  X: "); Serial.print(currentPos.wifiX, 2); Serial.println(" m");
      Serial.print("  Y: "); Serial.print(currentPos.wifiY, 2); Serial.println(" m");
      Serial.print("  Accuracy: ¬±"); Serial.print(currentPos.wifiAccuracy, 2); Serial.println(" m");
    }
  }
  
  // –¢—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è –ø–æ BLE
  bool bleOK = false;
  if (beacons[0].bleFound && beacons[1].bleFound && beacons[2].bleFound) {
    bleOK = trilaterate(
      beacons[0].bleDistance, beacons[1].bleDistance, beacons[2].bleDistance,
      beacons[0].x, beacons[0].y, beacons[1].x, beacons[1].y, beacons[2].x, beacons[2].y,
      currentPos.bleX, currentPos.bleY, currentPos.bleAccuracy
    );
    
    if (bleOK) {
      Serial.println("\n[BLE] Position calculated:");
      Serial.print("  X: "); Serial.print(currentPos.bleX, 2); Serial.println(" m");
      Serial.print("  Y: "); Serial.print(currentPos.bleY, 2); Serial.println(" m");
      Serial.print("  Accuracy: ¬±"); Serial.print(currentPos.bleAccuracy, 2); Serial.println(" m");
    }
  }
  
  // FUSION: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ WiFi –∏ BLE
  if (wifiOK && bleOK) {
    // –í–µ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—ã –æ—à–∏–±–∫–µ
    float w1 = 1.0 / (currentPos.wifiAccuracy + 0.1);
    float w2 = 1.0 / (currentPos.bleAccuracy + 0.1);
    float total = w1 + w2;
    
    currentPos.wifiWeight = w1 / total;
    currentPos.bleWeight = w2 / total;
    
    currentPos.x = currentPos.wifiWeight * currentPos.wifiX + currentPos.bleWeight * currentPos.bleX;
    currentPos.y = currentPos.wifiWeight * currentPos.wifiY + currentPos.bleWeight * currentPos.bleY;
    currentPos.accuracy = currentPos.wifiWeight * currentPos.wifiAccuracy + currentPos.bleWeight * currentPos.bleAccuracy;
    
    Serial.println("\n[FUSION] Combined position:");
    Serial.print("  WiFi weight: "); Serial.println(currentPos.wifiWeight, 2);
    Serial.print("  BLE weight: "); Serial.println(currentPos.bleWeight, 2);
    
  } else if (wifiOK) {
    currentPos.x = currentPos.wifiX;
    currentPos.y = currentPos.wifiY;
    currentPos.accuracy = currentPos.wifiAccuracy;
    currentPos.wifiWeight = 1.0;
    currentPos.bleWeight = 0.0;
    Serial.println("\n[FUSION] Using WiFi only");
    
  } else if (bleOK) {
    currentPos.x = currentPos.bleX;
    currentPos.y = currentPos.bleY;
    currentPos.accuracy = currentPos.bleAccuracy;
    currentPos.wifiWeight = 0.0;
    currentPos.bleWeight = 1.0;
    Serial.println("\n[FUSION] Using BLE only");
    
  } else {
    Serial.println("\n‚ö†Ô∏è Not enough beacons found!");
    return;
  }
  
  // –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
  xBuffer[bufferIdx] = currentPos.x;
  yBuffer[bufferIdx] = currentPos.y;
  bufferIdx = (bufferIdx + 1) % SMOOTH_SIZE;
  
  float smoothX = 0, smoothY = 0;
  for (int i = 0; i < SMOOTH_SIZE; i++) {
    smoothX += xBuffer[i];
    smoothY += yBuffer[i];
  }
  currentPos.x = smoothX / SMOOTH_SIZE;
  currentPos.y = smoothY / SMOOTH_SIZE;
  
  Serial.println("\nüìç FINAL POSITION:");
  Serial.print("  X: "); Serial.print(currentPos.x, 2); Serial.println(" m");
  Serial.print("  Y: "); Serial.print(currentPos.y, 2); Serial.println(" m");
  Serial.print("  Accuracy: ¬±"); Serial.print(currentPos.accuracy, 2); Serial.println(" m");
}

// ========== –í–´–í–û–î –°–¢–ê–¢–£–°–ê ==========

void printStatus() {
  Serial.println("\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
  Serial.println("üìä STATUS SUMMARY\n");
  
  Serial.println("Beacon Status:");
  for (int i = 0; i < 3; i++) {
    Serial.print("  Beacon "); Serial.print(i+1); Serial.print(": ");
    Serial.print(beacons[i].wifiFound ? "WiFi‚úÖ" : "WiFi‚ùå");
    Serial.print(" | ");
    Serial.println(beacons[i].bleFound ? "BLE‚úÖ" : "BLE‚ùå");
  }
  
  Serial.print("\nWebSocket Clients: ");
  Serial.println(webSocket.connectedClients());
  
  Serial.println("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n");
}

// ========== WEBSOCKET EVENTS ==========

void webSocketEvent(uint8_t num, WStype_t type, uint8_t * payload, size_t length) {
  switch(type) {
    case WStype_DISCONNECTED:
      Serial.printf("[WebSocket] Client #%u disconnected\n", num);
      break;
      
    case WStype_CONNECTED:
      {
        IPAddress ip = webSocket.remoteIP(num);
        Serial.printf("[WebSocket] Client #%u connected from %d.%d.%d.%d\n", 
          num, ip[0], ip[1], ip[2], ip[3]);
      }
      break;
  }
}

// ========== –û–¢–ü–†–ê–í–ö–ê –î–ê–ù–ù–´–• ==========

void sendDataToClients() {
  if (webSocket.connectedClients() == 0) return;
  
  // –°–æ–∑–¥–∞–µ–º JSON
  StaticJsonDocument<1024> doc;
  
  doc["timestamp"] = millis();
  
  // –ü–æ–∑–∏—Ü–∏—è
  JsonObject pos = doc.createNestedObject("position");
  pos["x"] = currentPos.x;
  pos["y"] = currentPos.y;
  pos["accuracy"] = currentPos.accuracy;
  
  // WiFi –¥–∞–Ω–Ω—ã–µ
  JsonObject wifi = doc.createNestedObject("wifi");
  for (int i = 0; i < 3; i++) {
    JsonObject b = wifi.createNestedObject("beacon" + String(i+1));
    b["rssi"] = beacons[i].wifiRSSI;
    b["distance"] = beacons[i].wifiDistance;
    b["found"] = beacons[i].wifiFound;
  }
  
  // BLE –¥–∞–Ω–Ω—ã–µ
  JsonObject ble = doc.createNestedObject("ble");
  for (int i = 0; i < 3; i++) {
    JsonObject b = ble.createNestedObject("beacon" + String(i+1));
    b["rssi"] = beacons[i].bleRSSI;
    b["distance"] = beacons[i].bleDistance;
    b["found"] = beacons[i].bleFound;
  }
  
  // Fusion –¥–∞–Ω–Ω—ã–µ
  JsonObject fusion = doc.createNestedObject("fusion");
  fusion["wifi_weight"] = currentPos.wifiWeight;
  fusion["ble_weight"] = currentPos.bleWeight;
  
  // –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
  String json;
  serializeJson(doc, json);
  webSocket.broadcastTXT(json);
}